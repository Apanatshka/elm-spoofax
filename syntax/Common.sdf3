module Common

lexical syntax

  ID             = [a-z] [a-zA-Z0-9\_]*
  UPPERID        = [A-Z] [a-zA-Z0-9\_]* 
  INT            = "-"? [0-9]+ 
  FLOAT          = [0-9]* "." [0-9]+
  BINOP          = [\~\!\@\#\$\%\^\&\*\-\+\=\<\>\?]+
  STRING         = "\"" StringChar* "\""
  STRING         = "\"\"\"" (~[\"] | HeredocDQuote)* "\"\"\"" 
  StringChar     = ~[\"\n\r]
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar
  CHAR           = "'" CharChar "'"
  CharChar       = ~[\'\n\r]
  HeredocDQuote  = [\"]
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\{]
  LAYOUT         = BlockComment 
  BlockComment   = "{-" InsideComment* "-}" 
  InsideComment  = ~[\{] 
  InsideComment  = CommentChar
  InsideComment  = BlockComment
  LAYOUT         = "--" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

context-free syntax

BinOp.BinOp = BINOP

syntax

BinOp-CF.InfixFun  = "`" ID-CF "`"
BinOp-CF.InfixCons = "`" UPPERID-CF "`"


lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\-]
  INT           -/- [0-9]
  FLOAT         -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  UPPERID       -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]
  
  // Heredoc double quote should not be followed by two more
  
  HeredocDQuote   -/- [\"].[\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\-].[\-]
  LAYOUT? -/- [\{].[\-]

