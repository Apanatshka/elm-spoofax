module Expr

imports

Lexical
Common
Pattern
Def

context-free syntax

Expr.Unit  = [()]
Expr.Tuple = [([Expr], [{Expr ", "}+])]
Expr.List  = <[<{Expr ", "}*>]>
Expr.Range = <[<Expr>..<Expr>]>
Expr.Rec   = [{[{RecBind ", "}*]}]
Expr.ADT   = UPPERID

context-free syntax

RecBind.RecBind = [[ID] = [Expr]]

MwIfBranch.MwIfBr = [| [Expr] -> [Expr]]
CaseBranch.CaseBr = [[Pattern] -> [Expr]]

context-free syntax

Expr = Literal

Expr = [([Expr])] {bracket}
Expr = Ref

Expr.PrefixTupleOp = PREFIXTUPLEOP

Expr.RecRem = [{[ID] - [ID]}]
Expr.RecAdd = [{[ID] | [RecAdd]}]
Expr.RecRen = [{[ID] - [ID] | [RecAdd]}]
Expr.RecUpd = [{[ID] | [{RecUpd ", "}+]}]

RecAdd.RecAdd = [[ID] = [Expr]]
RecUpd.RecUpd = [[ID] <- [Expr]]

syntax

Expr-CF.QualRef = UpperIds-CF "." ID-CF
Expr-CF.RecGet = Expr-CF "." ID-CF
Expr-CF.Getter = " ." ID-CF {avoid}
// avoid application of this, so RecGet gets chosen

context-free syntax

Expr.If      = [if [Expr]
  then [Expr]
  else [Expr]]

Expr.MwIf    = [if[MwIfBranches]]
Expr.Case    = [case [Expr] of
  [CaseBranches]]

Expr.Lam     = [\[Pattern+] -> [Expr]]
Expr.App     = [[Expr] [Expr]] {left}
Expr.Let     = [let [Defs]
in [Expr]]

Expr.EBinOp   = [[Expr] [BinOp] [Expr]] {left}

context-free syntax

MwIfBranches = MwIfBranch
MwIfBranches.MwIfBranchSeq = MwIfBranchNEWLINE MwIfBranches {layout("1.first.col == 2.first.col")}

CaseBranches = CaseBranch
CaseBranches.CaseBranchSeq = CaseBranchNEWLINE CaseBranches {layout("1.first.col == 2.first.col")}

Defs = Def
Defs.DefSeq = DefNEWLINE Defs {layout("1.first.col == 2.first.col")}

syntax

MwIfBranchNEWLINE-CF = MwIfBranch-CF LAYOUT?-CF {enforce-newline}
CaseBranchNEWLINE-CF = CaseBranch-CF LAYOUT?-CF {enforce-newline}
DefNEWLINE-CF = Def-CF LAYOUT?-CF {enforce-newline}

context-free priorities

// Expr.ToBinOp > BinOpExpr.ToExpr,
Expr.App >
Expr.EBinOp > {
  Expr.If
  Expr.MwIf
  Expr.Case
  Expr.Lam
  Expr.Let
}

template options
keyword -/- [A-Za-z0-9\_\']
