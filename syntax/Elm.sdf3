module Elm

imports

Common
Type
Def

context-free start-symbols

Start

context-free syntax

Start.Module = [module [{UPPERID "."}+][Exports] where
[{Import "\n"}*]

[{TopLevelStatement "\n\n"}*]]

Exports.ExportAll = []
Exports.Exports = [([{Export ", "}*])]

Export = ID
Export.ADT     = [[UPPERID]([{ADTExport ", "}*])]
Export.ADTNone = [[UPPERID]]
Export.ADTAll  = [[UPPERID](..)]

ADTExport = ID
ADTExport.All = [..]

Import.Import = [import [{UPPERID "."}+][ModAlias][Exposing]]

ModAlias.ModAlias = [ as [UPPERID]]
ModAlias.NoModAlias = []

Exposing.NoExposing = []
Exposing.Exposing = [ exposing ([{Export ", "}*])]

TopLevelStatement.AliasDef = [type alias [UPPERID] [ID*] = [Type]]
TopLevelStatement.ADTDef = [type [UPPERID] [ID*] = [{ADTDef " | "}+]]
TopLevelStatement = Def
TopLevelStatement.Port = [port [TypeDef]
port [ValueDef]]

ADTDef.ADTCons = [[UPPERID] [Type+]]

syntax

TopLevelStatement-CF.Fixity =
  "infix" Fixity-CF LAYOUT?-CF INT-CF LAYOUT?-CF BinOp-CF

context-free syntax

Fixity.Left = [l]
Fixity.Right = [r]

template options

tokenize: "()"
