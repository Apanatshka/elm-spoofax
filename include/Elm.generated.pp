[
   VarPat                       -- _1,
   Wld                          -- KW["_"],
   ADTPat                       -- _1 _2,
   ADTPat.2:iter-star           -- _1,
   RecPat                       -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   RecPat.1:iter-star           -- _1,
   COMPLETION-Pattern           -- _1,
   Int                          -- _1,
   Float                        -- _1,
   String                       -- _1,
   Char                         -- _1,
   Tuple                        -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep        -- _1 KW[","],
   List                         -- KW["["] _1 KW["]"],
   List.1:iter-star-sep         -- _1 KW[","],
   Range                        -- KW["["] _1 KW[".."] _2 KW["]"],
   Record                       -- KW["{"] _1 KW["}"],
   Record.1:iter-star-sep       -- _1 KW[","],
   COMPLETION-Expr              -- _1,
   RecBind                      -- _1 KW["="] _2,
   MwIfBr                       -- KW["|"] _1 KW["->"] _2,
   CaseBr                       -- _1 KW["->"] _2,
   COMPLETION-RecBind           -- _1,
   COMPLETION-MwIfBranch        -- _1,
   COMPLETION-CaseBranch        -- _1,
   RecRem                       -- KW["{"] _1 KW["-"] _2 KW["}"],
   RecAdd                       -- KW["{"] _1 KW["|"] _2 KW["}"],
   RecRen                       -- KW["{"] _1 KW["-"] _2 KW["|"] _3 KW["}"],
   RecUpd                       -- KW["{"] _1 KW["|"] _2 KW["}"],
   RecUpd.2:iter-sep            -- _1 KW[","],
   RecAdd                       -- _1 KW["="] _2,
   RecUpd                       -- _1 KW["<-"] _2,
   COMPLETION-Expr              -- _1,
   COMPLETION-RecAdd            -- _1,
   COMPLETION-RecUpd            -- _1,
   If                           -- KW["if"] _1 KW["then"] _2 KW["else"] _3,
   MwIf                         -- V  [H  [KW["if"]] _1],
   MwIf.1:iter                  -- _1,
   Case                         -- KW["case"] _1 KW["of"] _2,
   Case.2:iter                  -- _1,
   Lam                          -- KW["\\"] _1 KW["->"] _2,
   Lam.1:iter                   -- _1,
   App                          -- _1 _2,
   Let                          -- KW["let"] _1 KW["in"] _2,
   Let.1:iter                   -- _1,
   ToBinOp                      -- _1,
   ToExpr                       -- _1,
   BinOpE                       -- _1 _2 _3,
   COMPLETION-Expr              -- _1,
   COMPLETION-BinOpExpr         -- _1,
   AnnotatedDef                 -- _1 _2,
   TypeAnno                     -- _1 KW[":"] _2,
   UnannotatedDef               -- _1 _2 KW["="] _3,
   UnannotatedDef.2:iter-star   -- _1,
   COMPLETION-Def               -- _1,
   COMPLETION-TypeDef           -- _1,
   COMPLETION-ValueDef          -- _1,
   VarType                      -- _1,
   Type                         -- _1 _2,
   Type.2:iter-star             -- _1,
   FunType                      -- _1 KW["->"] _2,
   RecType                      -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   RecType.1:iter-star          -- _1,
   RecExtType                   -- KW["{"] _1 KW["|"] _2 KW["}"],
   RecExtType.2:iter-star       -- _1,
   RecBindT                     -- _1 KW[":"] _2,
   COMPLETION-Type              -- _1,
   COMPLETION-RecBindT          -- _1,
   BinOp                        -- _1,
   Module                       -- KW["module"] _1 _2 KW["where"] _3 _4,
   Module.1:iter-sep            -- _1 KW["."],
   Module.3:iter-star           -- _1,
   Module.4:iter-star           -- _1,
   ExportAll                    -- ,
   Exports                      -- KW["("] _1 KW[")"],
   Exports.1:iter-star-sep      -- _1 KW[","],
   ADT                          -- _1 KW["("] _2 KW[")"],
   ADT.2:iter-star-sep          -- _1 KW[","],
   ADTNone                      -- _1,
   ADTAll                       -- _1 KW["("] KW[".."] KW[")"],
   All                          -- KW[".."],
   Import                       -- KW["import"] _1 _2 _3,
   Import.1:iter-sep            -- _1 KW["."],
   ModAlias                     -- KW["as"] _1,
   NoModAlias                   -- ,
   NoExposing                   -- ,
   Exposing                     -- KW["exposing"] KW["("] _1 KW[")"],
   Exposing.1:iter-star-sep     -- _1 KW[","],
   AliasDef                     -- KW["type"] KW["alias"] _1 _2 KW["="] _3,
   AliasDef.2:iter-star         -- _1,
   ADTDef                       -- KW["type"] _1 _2 KW["="] _3,
   ADTDef.2:iter-star           -- _1,
   ADTDef.3:iter-sep            -- _1 KW["|"],
   Port                         -- KW["port"] _1 KW["port"] _2,
   ADTCons                      -- _1 _2,
   ADTCons.2:iter               -- _1,
   COMPLETION-Start             -- _1,
   COMPLETION-Exports           -- _1,
   COMPLETION-Export            -- _1,
   COMPLETION-ADTExport         -- _1,
   COMPLETION-Import            -- _1,
   COMPLETION-ModAlias          -- _1,
   COMPLETION-Exposing          -- _1,
   COMPLETION-TopLevelStatement -- _1,
   COMPLETION-ADTDef            -- _1,
   Left                         -- KW["l"],
   Right                        -- KW["r"],
   COMPLETION-Fixity            -- _1
]